// Hint: Crib from your model_view_projection.vs
// Layout:
//                                         Indicate that we're dealing with
//                                         triangles in CCW order and using a
//                                         sane spacing.
layout(triangles, equal_spacing, ccw) in;
// Uniforms
uniform mat4 view;
uniform mat4 proj;
uniform float animation_seconds;
uniform bool is_moon;
// Inputs:
//                    array of 3 3D patch corner positions
in vec4 pos_es_in[];
// Outputs:
//                   projected, view, and model transformed 3D position
out vec4 pos_fs_in;
//                        view and model transformed 3D position
out vec4 view_pos_fs_in;
//                      view and model transformed 3D normal
out vec3 normal_fs_in;
//                      3D position _before_ applying model, view or projection
//                      transformations (e.g., point on unit sphere)
out vec3 sphere_fs_in;
// expects: interpolat, model, 
void main()
{
  /////////////////////////////////////////////////////////////////////////////
  // Replace with your code 
  float rotationT = 4;
  float theta = 2 * M_PI * animation_seconds /rotationT;

  
  sphere_fs_in = interpolate(gl_TessCoord, pos_es_in[0], pos_es_in[1], pos_es_in[2]).xyz;
  sphere_fs_in = normalize(sphere_fs_in);

  view_pos_fs_in = view * model(is_moon, theta) * vec4(sphere_fs_in, 1.0);

  // normal is the world coordinate

  mat4 rotate = identity() * int(!is_moon) + rotate_about_y(theta) * int(is_moon);
  normal_fs_in = (rotate * vec4(sphere_fs_in, 1.0)).xyz;

  pos_fs_in = proj * view_pos_fs_in;

  gl_Position = pos_fs_in;
  /////////////////////////////////////////////////////////////////////////////
}


